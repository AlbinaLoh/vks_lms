import os
import django
import sys
from asgiref.sync import sync_to_async
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackContext, ConversationHandler, JobQueue
)

# --- Django setup ---
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'eLMS.settings')  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É—Ç—å –∫ settings.py
django.setup()

from main.models import Course, News, Faculty

SELECT_COURSE = 1

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–≤ –ø—Ä–æ—Å—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ - –≤ –ø–∞–º—è—Ç–∏, –ª—É—á—à–µ –≤ –ë–î)
subscribers = set()

# –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ
@sync_to_async
def get_news_author_name(news):
    faculty = Faculty.objects.filter(id=news.faculty_id).first()
    return faculty.name if faculty else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

@sync_to_async
def get_latest_news(last_id=None):
    qs = News.objects.order_by('-created_at')
    if last_id:
        qs = qs.filter(id__gt=last_id)
    return list(qs)

@sync_to_async
def get_new_courses(last_id=None):
    qs = Course.objects.order_by('-created_at')
    if last_id:
        qs = qs.filter(id__gt=last_id)
    return list(qs)

@sync_to_async
def get_all_courses():
    return list(Course.objects.all())

@sync_to_async
def get_course_by_name(name):
    return Course.objects.get(name=name)

@sync_to_async
def get_course_schedules(course):
    return list(course.schedule_set.all()) if hasattr(course, 'schedule_set') else []

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∫—É—Ä—Å–æ–≤ 
last_news_id = 0
last_course_id = 0

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
async def subscribe(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    subscribers.add(chat_id)
    await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –∏ –∫—É—Ä—Å–∞—Ö.")

async def unsubscribe(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    subscribers.discard(chat_id)
    await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¶–µ–Ω—Ç—Ä–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ù–ö–û.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/news ‚Äî —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "/new_courses ‚Äî –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã\n"
        "/schedule ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤\n"
        "/subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/unsubscribe ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )

@sync_to_async
def get_news_author_name(news):
    faculty = Faculty.objects.filter(id=news.faculty_id).first()
    return faculty.name if faculty else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

@sync_to_async
def get_latest_news(last_id=None):
    qs = News.objects.order_by('-id')
    if last_id:
        qs = qs.filter(id__gt=last_id)
    return list(qs)

@sync_to_async
def get_new_courses(last_id=None):
    qs = Course.objects.order_by('-id')
    if last_id:
        qs = qs.filter(id__gt=last_id)
    return list(qs)

async def news(update: Update, context: CallbackContext):
    latest_news = await get_latest_news()
    if latest_news:
        messages = []
        for n in latest_news:
            author_name = await get_news_author_name(n)
            link = n.get_absolute_url() if hasattr(n, 'get_absolute_url') else '–Ω–µ—Ç —Å—Å—ã–ª–∫–∏'
            messages.append(f"{n.title}\n–ê–≤—Ç–æ—Ä: {author_name}\n–°—Å—ã–ª–∫–∞: {link}")
        text = "–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n" + "\n\n".join(messages)
    else:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π."
    await update.message.reply_text(text)

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∫—É—Ä—Å–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
async def notify_updates(context: CallbackContext):
    global last_news_id, last_course_id
    bot = context.bot

    new_news = await get_latest_news(last_news_id)
    new_courses = await get_new_courses(last_course_id)

    for news in reversed(new_news):
        author_name = await get_news_author_name(news)
        link = news.get_absolute_url() if hasattr(news, 'get_absolute_url') else '–Ω–µ—Ç —Å—Å—ã–ª–∫–∏'
        message = f"üì∞ –ù–æ–≤–æ—Å—Ç—å: {news.title}\n–ê–≤—Ç–æ—Ä: {author_name}\n–°—Å—ã–ª–∫–∞: {link}"
        for chat_id in subscribers:
            try:
                await bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ {news.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        last_news_id = max(last_news_id, news.id)

    for course in reversed(new_courses):
        message = f"üìö –ù–æ–≤—ã–π –∫—É—Ä—Å: {course.name} ‚Äî {course.code}"
        for chat_id in subscribers:
            try:
                await bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É—Ä—Å–∞ {course.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        last_course_id = max(last_course_id, course.id)

def main():
    TOKEN = "8118133343:AAHQGrj_tUN4Wzx4-W95nTD0-NaHs7Aav80"
    application = Application.builder().token(TOKEN).build()

    schedule_conv = ConversationHandler(
        entry_points=[CommandHandler('schedule', schedule)],
        states={
            SELECT_COURSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_schedule)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('news', news))
    application.add_handler(CommandHandler('new_courses', new_courses))
    application.add_handler(CommandHandler('subscribe', subscribe))
    application.add_handler(CommandHandler('unsubscribe', unsubscribe))
    application.add_handler(schedule_conv)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    application.job_queue.run_repeating(notify_updates, interval=600, first=10)

    application.run_polling()

if __name__ == '__main__':
    main()
